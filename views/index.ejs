<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Random Video Chat</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      background-color: #121212;
      height: 100vh;
      color: #ffffff;
      transition: background-color 0.3s, color 0.3s;
      padding: 10px;
    }
    h1 {
      margin-bottom: 20px;
      text-align: center;
      font-size: 24px;
    }
    .video-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      width: 100%;
      max-width: 1200px;
      margin-bottom: 20px;
    }
    video {
      width: 100%;
      border-radius: 10px;
      transition: transform 0.3s;
      aspect-ratio: 16 / 9;
    }
    video:hover {
      transform: scale(1.05);
    }
    #remoteVideo {
      border: 2px solid #007bff;
    }
    #localVideo {
      border: 2px solid #28a745;
    }
    #status {
      margin-top: 10px;
      font-size: 18px;
      text-align: center;
    }
    .controls {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 20px;
      gap: 10px;
    }
    .control-button {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      transition: background-color 0.3s;
    }
    .start-button {
      background-color: #007bff;
      color: #fff;
    }
    .end-button {
      background-color: #dc3545;
      color: #fff;
    }
    .toggle-button {
      color: #fff;
      margin-bottom: 20px;
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 24px;
      cursor: pointer;
    }
    input {
      width: 80%;
      max-width: 800px;
      height: 50px;
      font-size: larger;
      border-radius: 10px;
      padding: 0 10px;
      border: 1px solid #ccc;
    }
    /* Light Mode Styles */
    body.light {
      background-color: #ffffff;
      color: #000000;
    }
    body.light #remoteVideo {
      border: 2px solid #007bff;
    }
    body.light #localVideo {
      border: 2px solid #28a745;
    }
    /* Responsive Styles */
    @media (max-width: 768px) {
      .video-container {
        grid-template-columns: 1fr;
      }
      .controls {
        flex-direction: column;
        gap: 15px;
      }
      input {
        width: 90%;
      }
    }
    @media (max-width: 480px) {
      video {
        aspect-ratio: 4 / 3;
      }
      input {
        width: 100%;
      }
      h1 {
        font-size: 20px;
      }
    }
  </style>
</head>
<body>
  <nav>
    <h1>DevChat</h1>
    <button class="toggle-button" id="toggleTheme"><i class="fas fa-adjust"></i></button>
  </nav>
  <h1>Find Your Buddy!</h1>
  <div class="video-container">
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>
  </div>
  <div id="status">Waiting for a partner...</div>
  <div class="controls">
    <button class="control-button start-button" id="startCall">Skip</button>
    <input type="text" placeholder="Letâ€™s cook something..."/>
    <button class="control-button end-button" id="endCall">End</button>
  </div>

  <script type="module">
    import firebase from "https://www.gstatic.com/firebasejs/9.17.1/firebase-app.js";
    import { getFirestore, doc, collection, addDoc, onSnapshot, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/9.17.1/firebase-firestore.js";

    const firebaseConfig = {
      // Your config
    };

    const app = firebase.initializeApp(firebaseConfig);
    const db = getFirestore(app);

    const servers = {
      iceServers: [
        { urls: ["stun:stun1.l.google.com:19302", "stun:stun2.l.google.com:19302"] }
      ],
      iceCandidatePoolSize: 10,
    };

    const pc = new RTCPeerConnection(servers);
    let localStream = null;
    let remoteStream = new MediaStream();

    document.getElementById("startCall").onclick = async () => {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localStream.getTracks().forEach(track => pc.addTrack(track, localStream));
      document.getElementById("localVideo").srcObject = localStream;
      document.getElementById("remoteVideo").srcObject = remoteStream;

      pc.ontrack = (event) => {
        event.streams[0].getTracks().forEach(track => remoteStream.addTrack(track));
      };

      const callDoc = doc(collection(db, "calls"));
      const offerCandidates = collection(callDoc, "offerCandidates");
      const answerCandidates = collection(callDoc, "answerCandidates");
      const callId = callDoc.id;
      document.getElementById("callInput").value = callId;

      pc.onicecandidate = (event) => {
        event.candidate && addDoc(offerCandidates, event.candidate.toJSON());
      };

      const offerDescription = await pc.createOffer();
      await pc.setLocalDescription(offerDescription);

      await setDoc(callDoc, { offer: { type: offerDescription.type, sdp: offerDescription.sdp } });

      onSnapshot(callDoc, (snapshot) => {
        const data = snapshot.data();
        if (!pc.currentRemoteDescription && data?.answer) {
          const answerDescription = new RTCSessionDescription(data.answer);
          pc.setRemoteDescription(answerDescription);
        }
      });

      onSnapshot(answerCandidates, (snapshot) => {
        snapshot.docChanges().forEach((change) => {
          if (change.type === "added") {
            const candidate = new RTCIceCandidate(change.doc.data());
            pc.addIceCandidate(candidate);
          }
        });
      });
    };

    document.getElementById("endCall").onclick = () => {
      pc.close();
      location.reload();
    };
  </script>
</body>
</html>
