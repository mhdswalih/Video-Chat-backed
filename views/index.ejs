<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Random Video Chat</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      background-color: #121212;
      height: 100vh;
      color: #ffffff;
      transition: background-color 0.3s, color 0.3s;
      padding: 10px;
    }
    h1 {
      margin-bottom: 20px;
      text-align: center;
      font-size: 24px;
    }
    .video-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      width: 100%;
      max-width: 1200px;
      margin-bottom: 20px;
    }
    video {
      width: 100%;
      border-radius: 10px;
      transition: transform 0.3s;
      aspect-ratio: 16 / 9;
    }
    video:hover {
      transform: scale(1.05);
    }
    #remoteVideo {
      border: 2px solid #007bff;
    }
    #localVideo {
      border: 2px solid #28a745;
    }
    #status {
      margin-top: 10px;
      font-size: 18px;
      text-align: center;
    }
    .controls {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 20px;
      gap: 10px;
    }
    .control-button {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      transition: background-color 0.3s;
    }
    .start-button {
      background-color: #007bff;
      color: #fff;
    }
    .end-button {
      background-color: #dc3545;
      color: #fff;
    }
    .toggle-button {
      color: #fff;
      margin-bottom: 20px;
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 24px;
      cursor: pointer;
    }
    input {
      width: 80%;
      max-width: 800px;
      height: 50px;
      font-size: larger;
      border-radius: 10px;
      padding: 0 10px;
      border: 1px solid #ccc;
    }
    /* Light Mode Styles */
    body.light {
      background-color: #ffffff;
      color: #000000;
    }
    body.light #remoteVideo {
      border: 2px solid #007bff;
    }
    body.light #localVideo {
      border: 2px solid #28a745;
    }
    /* Responsive Styles */
    @media (max-width: 768px) {
      .video-container {
        grid-template-columns: 1fr;
      }
      .controls {
        flex-direction: column;
        gap: 15px;
      }
      input {
        width: 90%;
      }
    }
    @media (max-width: 480px) {
      video {
        aspect-ratio: 4 / 3;
      }
      input {
        width: 100%;
      }
      h1 {
        font-size: 20px;
      }
    }
  </style>
</head>
<body>
  <nav>
    <h1>DevChat</h1>
    <button class="toggle-button" id="toggleTheme"><i class="fas fa-adjust"></i></button>
  </nav>
  <h1>Find Your Buddy!</h1>
  <div class="video-container">
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>
  </div>
  <div id="status">Waiting for a partner...</div>
  <div class="controls">
    <button class="control-button start-button" id="startCall">Skip</button>
    <input type="text" placeholder="Letâ€™s cook something..."/>
    <button class="control-button end-button" id="endCall">End</button>
  </div>
  <script src="/js/script.js">
    // const toggleButton = document.getElementById('toggleTheme');
    // toggleButton.addEventListener('click', () => {
    //   document.body.classList.toggle('light');
    // });

    // const localVideo = document.getElementById('localVideo');
    // const remoteVideo = document.getElementById('remoteVideo');
    // const statusDiv = document.getElementById('status');

    // const peerConnection = new RTCPeerConnection({
    //   iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    // });

    // const socket = new WebSocket('ws://localhost:3500');

    // socket.onmessage = async ({ data }) => {
    //   const message = JSON.parse(data);
    //   if (message.type === 'partner-found') {
    //     statusDiv.textContent = 'Partner found! Starting video chat...';
    //     const offer = await peerConnection.createOffer();
    //     await peerConnection.setLocalDescription(offer);
    //     socket.send(JSON.stringify({ type: 'offer', offer }));
    //   } else if (message.type === 'offer') {
    //     await peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));
    //     const answer = await peerConnection.createAnswer();
    //     await peerConnection.setLocalDescription(answer);
    //     socket.send(JSON.stringify({ type: 'answer', answer }));
    //   } else if (message.type === 'answer') {
    //     await peerConnection.setRemoteDescription(new RTCSessionDescription(message.answer));
    //   } else if (message.type === 'candidate') {
    //     await peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));
    //   } else if (message.type === 'partner-disconnected') {
    //     statusDiv.textContent = 'Partner disconnected. Waiting for a new partner...';
    //     remoteVideo.srcObject = null;
    //   }
    // };

    // navigator.mediaDevices.getUserMedia({ video: true, audio: true })
    //   .then(stream => {
    //     localVideo.srcObject = stream;
    //     stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
    //   })
    //   .catch(error => {
    //     alert('Please allow access to camera and microphone.');
    //   });

    // peerConnection.onicecandidate = (event) => {
    //   if (event.candidate) {
    //     socket.send(JSON.stringify({ type: 'candidate', candidate: event.candidate }));
    //   }
    // };

    // peerConnection.ontrack = (event) => {
    //   const remoteStream = event.streams[0];
    //   remoteVideo.srcObject = remoteStream;
    // };

    // document.getElementById('endCall').addEventListener('click', () => {
    //   socket.close();
    //   peerConnection.close();
    //   remoteVideo.srcObject = null;
    //   statusDiv.textContent = 'Call ended. Waiting for a new partner...';
    // });
  </script>
</body>
</html>
