<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Random Video Chat</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    /* Styles */
    * { box-sizing: border-box; margin: 0; padding: 0; font-family: Arial, sans-serif; }
    body { display: flex; flex-direction: column; align-items: center; background-color: #121212; height: 100vh; color: #fff; }
    h1 { margin: 20px 0; font-size: 24px; text-align: center; }
    .video-container { display: flex; gap: 20px; margin-bottom: 20px; }
    video { width: 100%; max-width: 600px; border: 2px solid #007bff; border-radius: 10px; }
    .controls { display: flex; gap: 10px; }
    .control-button { padding: 10px 20px; font-size: 16px; border: none; border-radius: 5px; cursor: pointer; }
    .start-button { background-color: #007bff; color: #fff; }
    .end-button { background-color: #dc3545; color: #fff; }
  </style>
</head>
<body>
  <h1>Random Video Chat</h1>
  <div class="video-container">
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>
  </div>
  <div class="controls">
    <button class="control-button start-button" id="startCall">Start Call</button>
    <button class="control-button end-button" id="endCall">End Call</button>
  </div>

  <script>
    const servers = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] }; // STUN server
    const pc = new RTCPeerConnection(servers);
    let localStream = null;

    // Start the video call
    async function startCall() {
      // Get local media stream
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      document.getElementById("localVideo").srcObject = localStream;

      // Add local stream tracks to the peer connection
      localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

      // When a remote track is received, display it in the remote video element
      pc.ontrack = event => {
        document.getElementById("remoteVideo").srcObject = event.streams[0];
      };

      // Log new ICE candidates (in a real application, send to remote peer)
      pc.onicecandidate = event => {
        if (event.candidate) {
          console.log("New ICE candidate: ", event.candidate);
        }
      };

      // Create and set the offer
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);

      // Set remote description with offer (loopback for testing on the same device)
      pc.setRemoteDescription(offer);
    }

    // End the video call
    function endCall() {
      pc.close();
      document.getElementById("localVideo").srcObject = null;
      document.getElementById("remoteVideo").srcObject = null;
      location.reload(); // Reset the page for a fresh start
    }

    // Button event listeners
    document.getElementById("startCall").onclick = startCall;
    document.getElementById("endCall").onclick = endCall;
  </script>
</body>
</html>
